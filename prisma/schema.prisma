// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  email     String?   @unique
  name      String    @unique
  role      Role      @default(USER)
  journeys  Journey[]
}

model Journey {
  id        Int           @id @default(autoincrement())
  startedAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id])
  userId    Int
  plant     Plant         @relation(fields: [plantId], references: [id])
  plantId   Int
  status    JourneyStatus @default(ACTIVE)
  phase     Phase         @default(PREP)
  type      PlantType
  tasks     Task[]
}

model Plant {
  id            Int        @id @default(autoincrement())
  name          String     @unique
  image         String?
  minGrowthTime Int
  maxGrowthTime Int
  difficulty    Difficulty
  maintenance   String
  sprout        Sprout?
  food          Food?
  flower        Flower?
  journeys      Journey[]
  taskDetails   PlantToTaskDetail[]
}

model Sprout {
  id           Int                  @id @default(autoincrement())
  plant        Plant                @relation(fields: [plantId], references: [id])
  plantId      Int                  @unique
  sproutLength Int
  usage        String?
  benefits     String?
  taskDetails  SproutToTaskDetail[]
}

model Food {
  id          Int                @id @default(autoincrement())
  plant       Plant              @relation(fields: [plantId], references: [id])
  plantId     Int                @unique
  light       Light
  watering    Int
  harvesting  Int?
  pruning     Int?
  maturity    String
  usage       String?
  benefits    String?
  taskDetails FoodToTaskDetail[]
}

model Flower {
  id          Int                  @id @default(autoincrement())
  plant       Plant                @relation(fields: [plantId], references: [id])
  plantId     Int                  @unique
  light       Light
  watering    Int
  pruning     Int?
  maturity    String
  appearance  String
  usage       String?
  taskDetails FlowerToTaskDetail[]
}

model Task {
  id           Int          @id @default(autoincrement())
  journey      Journey      @relation(fields: [journeyId], references: [id])
  journeyId    Int
  status       TaskStatus   @default(COMPLETED)
  lastDone     DateTime
  taskDetailId Int
  taskDetail   TaskDetail   @relation(fields: [taskDetailId], references: [id])
}


enum Role {
  USER
  ADMIN
}

enum JourneyStatus {
  ACTIVE
  FINISHED
  ABANDONED
}

enum Phase {
  PREP
  SOAKING
  GROWING
  HARVESTING
}

enum PlantType {
  SPROUT
  FOOD
  FLOWER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Light {
  FULL_SUN
  PARTIAL_SUN
  SHADE
  INDIRECT_LIGHT
  LOW_LIGHT
}

enum TaskType {
  PREP
  SOAK
  RINSE
  WATER
  FERTILIZE
  PRUNE
  HARVEST
  CHECK
}

enum TaskStatus {
  PENDING
  COMPLETED
  SKIPPED
}

model TaskDetail {
  id          Int        @id @default(autoincrement())
  picture     String?
  description String
  taskType    TaskType
  difficulty  Difficulty
  phase       Phase

  plants           PlantToTaskDetail[]
  sprouts          SproutToTaskDetail[]
  flowers          FlowerToTaskDetail[]
  Task             Task[]
  FoodToTaskDetail FoodToTaskDetail[]
}

model PlantToTaskDetail {
  plantId      Int
  taskDetailId Int
  order        Int

  plant      Plant      @relation(fields: [plantId], references: [id])
  taskDetail TaskDetail @relation(fields: [taskDetailId], references: [id])

  @@id([plantId, taskDetailId])
  @@unique([plantId, order])
}

model SproutToTaskDetail {
  sproutId     Int
  taskDetailId Int
  order        Int

  sprout     Sprout     @relation(fields: [sproutId], references: [id])
  taskDetail TaskDetail @relation(fields: [taskDetailId], references: [id])

  @@id([sproutId, taskDetailId])
  @@unique([sproutId, order])
}

model FoodToTaskDetail {
  foodId       Int
  taskDetailId Int
  order        Int

  food       Food       @relation(fields: [foodId], references: [id])
  taskDetail TaskDetail @relation(fields: [taskDetailId], references: [id])

  @@id([foodId, taskDetailId])
}

model FlowerToTaskDetail {
  flowerId     Int
  taskDetailId Int
  order        Int

  flower     Flower     @relation(fields: [flowerId], references: [id])
  taskDetail TaskDetail @relation(fields: [taskDetailId], references: [id])

  @@id([flowerId, taskDetailId])
  @@unique([flowerId, order])
}
